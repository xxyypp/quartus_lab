// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.1 Build 150 06/03/2015 SJ Full Version"

// DATE "11/24/2015 15:24:28"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module flip (
	clock,
	q);
input 	clock;
output 	[3:0] q;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \q[0]~output_o ;
wire \q[1]~output_o ;
wire \q[2]~output_o ;
wire \q[3]~output_o ;
wire \clock~input_o ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita0~sumout ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita1~sumout ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita2~sumout ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita2~COUT ;
wire \LPM_COUNTER_component|auto_generated|counter_comb_bita3~sumout ;
wire [3:0] \LPM_COUNTER_component|auto_generated|counter_reg_bit ;


cyclonev_io_obuf \q[0]~output (
	.i(\LPM_COUNTER_component|auto_generated|counter_reg_bit [0]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[0]~output .bus_hold = "false";
defparam \q[0]~output .open_drain_output = "false";
defparam \q[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \q[1]~output (
	.i(\LPM_COUNTER_component|auto_generated|counter_reg_bit [1]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[1]~output .bus_hold = "false";
defparam \q[1]~output .open_drain_output = "false";
defparam \q[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \q[2]~output (
	.i(\LPM_COUNTER_component|auto_generated|counter_reg_bit [2]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[2]~output .bus_hold = "false";
defparam \q[2]~output .open_drain_output = "false";
defparam \q[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \q[3]~output (
	.i(\LPM_COUNTER_component|auto_generated|counter_reg_bit [3]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[3]~output .bus_hold = "false";
defparam \q[3]~output .open_drain_output = "false";
defparam \q[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \LPM_COUNTER_component|auto_generated|counter_comb_bita0 (
// Equation(s):
// \LPM_COUNTER_component|auto_generated|counter_comb_bita0~sumout  = SUM(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [0] ) + ( VCC ) + ( !VCC ))
// \LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT  = CARRY(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [0] ) + ( VCC ) + ( !VCC ))

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\LPM_COUNTER_component|auto_generated|counter_reg_bit [0]),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(),
	.sumout(\LPM_COUNTER_component|auto_generated|counter_comb_bita0~sumout ),
	.cout(\LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT ),
	.shareout());
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita0 .extended_lut = "off";
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita0 .lut_mask = 64'h00000000000000FF;
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita0 .shared_arith = "off";
// synopsys translate_on

dffeas \LPM_COUNTER_component|auto_generated|counter_reg_bit[0] (
	.clk(\clock~input_o ),
	.d(\LPM_COUNTER_component|auto_generated|counter_comb_bita0~sumout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\LPM_COUNTER_component|auto_generated|counter_reg_bit [0]),
	.prn(vcc));
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[0] .is_wysiwyg = "true";
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[0] .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \LPM_COUNTER_component|auto_generated|counter_comb_bita1 (
// Equation(s):
// \LPM_COUNTER_component|auto_generated|counter_comb_bita1~sumout  = SUM(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [1] ) + ( GND ) + ( \LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT  ))
// \LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT  = CARRY(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [1] ) + ( GND ) + ( \LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT  ))

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\LPM_COUNTER_component|auto_generated|counter_reg_bit [1]),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(\LPM_COUNTER_component|auto_generated|counter_comb_bita0~COUT ),
	.sharein(gnd),
	.combout(),
	.sumout(\LPM_COUNTER_component|auto_generated|counter_comb_bita1~sumout ),
	.cout(\LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT ),
	.shareout());
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita1 .extended_lut = "off";
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita1 .lut_mask = 64'h0000FFFF000000FF;
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita1 .shared_arith = "off";
// synopsys translate_on

dffeas \LPM_COUNTER_component|auto_generated|counter_reg_bit[1] (
	.clk(\clock~input_o ),
	.d(\LPM_COUNTER_component|auto_generated|counter_comb_bita1~sumout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\LPM_COUNTER_component|auto_generated|counter_reg_bit [1]),
	.prn(vcc));
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[1] .is_wysiwyg = "true";
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[1] .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \LPM_COUNTER_component|auto_generated|counter_comb_bita2 (
// Equation(s):
// \LPM_COUNTER_component|auto_generated|counter_comb_bita2~sumout  = SUM(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [2] ) + ( GND ) + ( \LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT  ))
// \LPM_COUNTER_component|auto_generated|counter_comb_bita2~COUT  = CARRY(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [2] ) + ( GND ) + ( \LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT  ))

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\LPM_COUNTER_component|auto_generated|counter_reg_bit [2]),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(\LPM_COUNTER_component|auto_generated|counter_comb_bita1~COUT ),
	.sharein(gnd),
	.combout(),
	.sumout(\LPM_COUNTER_component|auto_generated|counter_comb_bita2~sumout ),
	.cout(\LPM_COUNTER_component|auto_generated|counter_comb_bita2~COUT ),
	.shareout());
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita2 .extended_lut = "off";
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita2 .lut_mask = 64'h0000FFFF000000FF;
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita2 .shared_arith = "off";
// synopsys translate_on

dffeas \LPM_COUNTER_component|auto_generated|counter_reg_bit[2] (
	.clk(\clock~input_o ),
	.d(\LPM_COUNTER_component|auto_generated|counter_comb_bita2~sumout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\LPM_COUNTER_component|auto_generated|counter_reg_bit [2]),
	.prn(vcc));
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[2] .is_wysiwyg = "true";
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[2] .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \LPM_COUNTER_component|auto_generated|counter_comb_bita3 (
// Equation(s):
// \LPM_COUNTER_component|auto_generated|counter_comb_bita3~sumout  = SUM(( \LPM_COUNTER_component|auto_generated|counter_reg_bit [3] ) + ( GND ) + ( \LPM_COUNTER_component|auto_generated|counter_comb_bita2~COUT  ))

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\LPM_COUNTER_component|auto_generated|counter_reg_bit [3]),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(\LPM_COUNTER_component|auto_generated|counter_comb_bita2~COUT ),
	.sharein(gnd),
	.combout(),
	.sumout(\LPM_COUNTER_component|auto_generated|counter_comb_bita3~sumout ),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita3 .extended_lut = "off";
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita3 .lut_mask = 64'h0000FFFF000000FF;
defparam \LPM_COUNTER_component|auto_generated|counter_comb_bita3 .shared_arith = "off";
// synopsys translate_on

dffeas \LPM_COUNTER_component|auto_generated|counter_reg_bit[3] (
	.clk(\clock~input_o ),
	.d(\LPM_COUNTER_component|auto_generated|counter_comb_bita3~sumout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\LPM_COUNTER_component|auto_generated|counter_reg_bit [3]),
	.prn(vcc));
// synopsys translate_off
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[3] .is_wysiwyg = "true";
defparam \LPM_COUNTER_component|auto_generated|counter_reg_bit[3] .power_up = "low";
// synopsys translate_on

assign q[0] = \q[0]~output_o ;

assign q[1] = \q[1]~output_o ;

assign q[2] = \q[2]~output_o ;

assign q[3] = \q[3]~output_o ;

endmodule
