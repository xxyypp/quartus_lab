// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2015 14:03:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu2_vlg_sample_tst(
	A,
	CLK,
	I0,
	I1,
	SHIFT,
	sampler_tx
);
input [3:0] A;
input  CLK;
input  I0;
input  I1;
input  SHIFT;
output sampler_tx;

reg sample;
time current_time;
always @(A or CLK or I0 or I1 or SHIFT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu2_vlg_check_tst (
	C_OUT,
	S,
	XX,
	YY,
	sampler_rx
);
input  C_OUT;
input [3:0] S;
input [3:0] XX;
input [3:0] YY;
input sampler_rx;

reg  C_OUT_expected;
reg [3:0] S_expected;
reg [3:0] XX_expected;
reg [3:0] YY_expected;

reg  C_OUT_prev;
reg [3:0] S_prev;
reg [3:0] XX_prev;
reg [3:0] YY_prev;

reg  C_OUT_expected_prev;
reg [3:0] S_expected_prev;
reg [3:0] XX_expected_prev;
reg [3:0] YY_expected_prev;

reg  last_C_OUT_exp;
reg [3:0] last_S_exp;
reg [3:0] last_XX_exp;
reg [3:0] last_YY_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_OUT_prev = C_OUT;
	S_prev = S;
	XX_prev = XX;
	YY_prev = YY;
end

// update expected /o prevs

always @(trigger)
begin
	C_OUT_expected_prev = C_OUT_expected;
	S_expected_prev = S_expected;
	XX_expected_prev = XX_expected;
	YY_expected_prev = YY_expected;
end



// expected C_OUT
initial
begin
	C_OUT_expected = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// expected XX[ 3 ]
initial
begin
	XX_expected[3] = 1'bX;
end 
// expected XX[ 2 ]
initial
begin
	XX_expected[2] = 1'bX;
end 
// expected XX[ 1 ]
initial
begin
	XX_expected[1] = 1'bX;
end 
// expected XX[ 0 ]
initial
begin
	XX_expected[0] = 1'bX;
end 
// expected YY[ 3 ]
initial
begin
	YY_expected[3] = 1'bX;
end 
// expected YY[ 2 ]
initial
begin
	YY_expected[2] = 1'bX;
end 
// expected YY[ 1 ]
initial
begin
	YY_expected[1] = 1'bX;
end 
// expected YY[ 0 ]
initial
begin
	YY_expected[0] = 1'bX;
end 
// generate trigger
always @(C_OUT_expected or C_OUT or S_expected or S or XX_expected or XX or YY_expected or YY)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_OUT = %b | expected S = %b | expected XX = %b | expected YY = %b | ",C_OUT_expected_prev,S_expected_prev,XX_expected_prev,YY_expected_prev);
	$display("| real C_OUT = %b | real S = %b | real XX = %b | real YY = %b | ",C_OUT_prev,S_prev,XX_prev,YY_prev);
`endif
	if (
		( C_OUT_expected_prev !== 1'bx ) && ( C_OUT_prev !== C_OUT_expected_prev )
		&& ((C_OUT_expected_prev !== last_C_OUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_OUT_expected_prev);
		$display ("     Real value = %b", C_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_OUT_exp = C_OUT_expected_prev;
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( XX_expected_prev[0] !== 1'bx ) && ( XX_prev[0] !== XX_expected_prev[0] )
		&& ((XX_expected_prev[0] !== last_XX_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XX_expected_prev);
		$display ("     Real value = %b", XX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_XX_exp[0] = XX_expected_prev[0];
	end
	if (
		( XX_expected_prev[1] !== 1'bx ) && ( XX_prev[1] !== XX_expected_prev[1] )
		&& ((XX_expected_prev[1] !== last_XX_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XX_expected_prev);
		$display ("     Real value = %b", XX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_XX_exp[1] = XX_expected_prev[1];
	end
	if (
		( XX_expected_prev[2] !== 1'bx ) && ( XX_prev[2] !== XX_expected_prev[2] )
		&& ((XX_expected_prev[2] !== last_XX_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XX_expected_prev);
		$display ("     Real value = %b", XX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_XX_exp[2] = XX_expected_prev[2];
	end
	if (
		( XX_expected_prev[3] !== 1'bx ) && ( XX_prev[3] !== XX_expected_prev[3] )
		&& ((XX_expected_prev[3] !== last_XX_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XX_expected_prev);
		$display ("     Real value = %b", XX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_XX_exp[3] = XX_expected_prev[3];
	end
	if (
		( YY_expected_prev[0] !== 1'bx ) && ( YY_prev[0] !== YY_expected_prev[0] )
		&& ((YY_expected_prev[0] !== last_YY_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YY[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YY_expected_prev);
		$display ("     Real value = %b", YY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_YY_exp[0] = YY_expected_prev[0];
	end
	if (
		( YY_expected_prev[1] !== 1'bx ) && ( YY_prev[1] !== YY_expected_prev[1] )
		&& ((YY_expected_prev[1] !== last_YY_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YY[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YY_expected_prev);
		$display ("     Real value = %b", YY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_YY_exp[1] = YY_expected_prev[1];
	end
	if (
		( YY_expected_prev[2] !== 1'bx ) && ( YY_prev[2] !== YY_expected_prev[2] )
		&& ((YY_expected_prev[2] !== last_YY_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YY[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YY_expected_prev);
		$display ("     Real value = %b", YY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_YY_exp[2] = YY_expected_prev[2];
	end
	if (
		( YY_expected_prev[3] !== 1'bx ) && ( YY_prev[3] !== YY_expected_prev[3] )
		&& ((YY_expected_prev[3] !== last_YY_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YY[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YY_expected_prev);
		$display ("     Real value = %b", YY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_YY_exp[3] = YY_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg CLK;
reg I0;
reg I1;
reg SHIFT;
// wires                                               
wire C_OUT;
wire [3:0] S;
wire [3:0] XX;
wire [3:0] YY;

wire sampler;                             

// assign statements (if any)                          
alu2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.C_OUT(C_OUT),
	.CLK(CLK),
	.I0(I0),
	.I1(I1),
	.S(S),
	.SHIFT(SHIFT),
	.XX(XX),
	.YY(YY)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// I0
initial
begin
	I0 = 1'b1;
end 

// I1
initial
begin
	I1 = 1'b0;
end 

// SHIFT
initial
begin
	SHIFT = 1'b1;
end 

alu2_vlg_sample_tst tb_sample (
	.A(A),
	.CLK(CLK),
	.I0(I0),
	.I1(I1),
	.SHIFT(SHIFT),
	.sampler_tx(sampler)
);

alu2_vlg_check_tst tb_out(
	.C_OUT(C_OUT),
	.S(S),
	.XX(XX),
	.YY(YY),
	.sampler_rx(sampler)
);
endmodule

